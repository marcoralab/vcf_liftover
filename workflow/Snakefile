import os
import stat
import re
import pandas as pd
import numpy as np


def parse_chrom(chrs):
    clist = [x.split(":") for x in chrs.split(",")]
    parsed = []
    for chrs in clist:
        if len(chrs) == 2:
            chrs = [str(c) for c in range(int(chrs[0]), int(chrs[1]) + 1)]
        elif len(chrs) != 1:
            raise ValueError("Invalid chromosome list.")
        parsed += chrs
    return parsed


include: 'ref.smk'

configfile: "config/config.yaml"
if ('inputs' in config):
    inputs = config['inputs']
else:
    raise KeyError("inputs are missing in config.yaml")

inputs = pd.DataFrame.from_dict(inputs, orient='index')

GATK_BUILDS_ONLY = config['all_GATK_builds']

def calculate_build(in_build):
    if in_build.lower() in ['grch36', 'b36', 'ncbi36', 'hg18']:
        return 36
    elif in_build.lower() in ['grch37', 'b37', 'hg19', 'humang1kv37']:
        return 37
    elif in_build.lower() in ['grch38', 'b38', 'hg38']:
        return 38

def fillcol(df, colname, default):
    if colname not in df:
        df[colname] = default
        return df
    df[colname] = df[colname].fillna(default)
    return df


output_builds = {'b{}'.format(calculate_build(x)) for x in config['output_builds']}
liftover_outdir = config['liftover_outdir']

inputs = fillcol(inputs, 'output', '_rplc_')
inputs = fillcol(inputs, 'filter', '_none_')
inputs = fillcol(inputs, 'contigs', '1:22')
inputs['build_no_start'] = [calculate_build(x) for x in inputs['build']]
inputs['contigs'] = [parse_chrom(x) for x in inputs['contigs']]


localrules: all

def filter_mainchrs(chrlist):
  chrset = set(chrlist) & set(parse_chrom('1:22,X,Y,MT'))
  chrlist = [*chrset]
  chrlist.sort()
  return chrlist


def liftbuilds(cht, template):
  builds = output_builds - {'b{}'.format(inputs['build_no_start'][cht])}
  return expand(template, liftover_outdir=config['liftover_outdir'],
                cohort=cht, tobuild=builds)


def allbuilds(cht, template):
  return expand(template, liftover_outdir=config['liftover_outdir'],
                cohort=cht, tobuild=output_builds)


def allbuilds_chr(cht, template):
  return expand(template, liftover_outdir=config['liftover_outdir'],
                cohort=cht, chrom=filter_mainchrs(inputs['contigs'][cht]),
                tobuild=output_builds)


def flatten(l):
  return sum(map(flatten,l),[]) if isinstance(l,list) else [l]

cohorts = config['inputs'].keys()

mismatched = '{liftover_outdir}/{cohort}.{tobuild}.mismatched_chroms.vcf.gz'
mismatched = flatten([liftbuilds(x, mismatched) for x in cohorts])

matched = '{liftover_outdir}/{cohort}.{tobuild}.chr{chrom}_only.vcf.gz'
matched = flatten([allbuilds_chr(x, matched) for x in cohorts])

matched_allchr = '{liftover_outdir}/{cohort}.{tobuild}.same_chr.vcf.gz'
matched_allchr = flatten([allbuilds(x, matched_allchr) for x in cohorts])

if config['concatenate']:
  matched = matched_allchr

b37file = 'resources/b37.builds.tsv'
b37_contigs = flatten(pd.read_csv(b37file, sep='\t').values.tolist())
constraint_exclude = {'chr' + x for x in parse_chrom('1:22,X,Y,M')}
b37_contigs_excl = set(b37_contigs) - constraint_exclude
b37_contigs_excl = '|'.join([*b37_contigs_excl])

wildcard_constraints:
  chrom=b37_contigs_excl


rule all:
  input:
    mismatched,
    matched



def getstartfile(wildcards):
  return inputs.loc[wildcards.cohort, 'input_vcf']

def chromname_in(wc):
  hg19 = wc.frombuild.lower() in ['grch37', 'hg19'] and not GATK_BUILDS_ONLY
  if hg19 or int(re.findall(r'\d+', wc.frombuild)[-1]) == 38:
    if wc.chrom in parse_chrom('1:22,X,Y'):
      return 'chr{}'.format(wc.chrom)
    if wc.chrom == "MT":
      return 'chrM'
  return wc.chrom


rule split_chrom:
  input: getstartfile
  output:
    vcf = temp('temp/{liftover_outdir}/{cohort}.{frombuild}.chr{chrom}.SPLIT.vcf.gz'),
    tbi = temp('temp/{liftover_outdir}/{cohort}.{frombuild}.chr{chrom}.SPLIT.vcf.gz.tbi')
  params:
    chr = chromname_in
  conda: 'envs/hgdpenv.yaml'
  threads: 1
  resources:
    mem_mb = 5200,
    walltime = '24:00'
  shell: '''
if [ ! -f {input}.tbi ]; then
  bcftools index -t {input}
fi
bcftools view --regions {params.chr} {input} -Oz -o {output.vcf}
bcftools index -t {output.vcf}
'''


def gsfi(wildcards):
  sf = getstartfile(wildcards)
  if '{chrom}' in sf:
    return sf
  return rules.split_chrom.output.vcf


rule filter:
  input: gsfi
  output:
    vcf = temp('temp/{liftover_outdir}/{cohort}.{frombuild}.chr{chrom}.FILTERED.vcf.gz'),
    tbi = temp('temp/{liftover_outdir}/{cohort}.{frombuild}.chr{chrom}.FILTERED.vcf.gz.tbi')
  params:
    filter = lambda wildcards: inputs.loc[wildcards.cohort, 'filter']
  conda: 'envs/hgdpenv.yaml'
  threads: 1
  resources:
    mem_mb = 5200,
    walltime = '24:00'
  shell: '''
if [ ! -f {input}.tbi ]; then
  bcftools index -t {input}
fi
bcftools view -f {params.filter} {input} -Oz -o {output.vcf}
bcftools index -t {output.vcf}
'''


rule nofilter:
  input: gsfi
  output:
    vcf = temp('temp/{liftover_outdir}/{cohort}.{frombuild}.chr{chrom}.UNFILTERED.vcf.gz'),
    tbi = temp('temp/{liftover_outdir}/{cohort}.{frombuild}.chr{chrom}.UNFILTERED.vcf.gz.tbi')
  conda: 'envs/hgdpenv.yaml'
  threads: 1
  resources:
    mem_mb = 4000,
    time_min = 120
  shell: '''
cp {input} {output.vcf}
bcftools index -t {output.vcf}
'''

gatk = 'docker://broadinstitute/gatk:4.1.9.0'

def lift_input(wildcards):
  if inputs.loc[wildcards.cohort, 'filter'] == '_none_':
    return rules.nofilter.output.vcf
  return rules.filter.output.vcf

rule liftover:
  input:
    vcf = lift_input,
    chain = 'resources/ref/{frombuild}_to_{tobuild}.over.chain.gz',
    fasta = 'resources/ref/{tobuild}.fa.gz',
    fdict = 'resources/ref/{tobuild}.dict'
  output:
    vcf = temp('temp/{liftover_outdir}/{cohort}.from-{frombuild}_to-{tobuild}.chr{chrom}.vcf.gz'),
    tbi = temp('temp/{liftover_outdir}/{cohort}.from-{frombuild}_to-{tobuild}.chr{chrom}.vcf.gz.tbi'),
    rejects = '{liftover_outdir}/rejects/{cohort}.from-{frombuild}_to-{tobuild}.chr{chrom}.rejects.vcf.gz'
  params:
    tempdir = 'temp/{liftover_outdir}/liftOver/{cohort}.from-{frombuild}_to-{tobuild}.chr{chrom}'
  container: gatk
  log: '{liftover_outdir}/logs/{cohort}.from-{frombuild}_to-{tobuild}.chr{chrom}.liftover.log'
  threads: 10
  resources:
    mem_mb = 8000,
    walltime = '24:00'
  shell: '''
mkdir -p {params.tempdir}
gatk LiftoverVcf --java-options "-Xms74G" \
 --I {input.vcf} --O {output.vcf} --CHAIN {input.chain} --R {input.fasta} \
 --REJECT {output.rejects} --TMP_DIR {params.tempdir} \
 --MAX_RECORDS_IN_RAM 7000 &> {log}
'''

def chromname(wildcards):
  if int(re.findall(r'\d+', wildcards.tobuild)[-1]) == 38:
    if wildcards.chrom == 'MT':
      return 'chrM'
    return 'chr{}'.format(wildcards.chrom)
  return wildcards.chrom

def get_out(wc):
  return inputs.loc[wildcards.cohort, 'output']

def matched_in(wildcards):
  fbuild = inputs.loc[wildcards.cohort, 'build']
  if GATK_BUILDS_ONLY:
    fbuild = 'b' + str(calculate_build(fbuild))
  if fbuild == wildcards.tobuild:
    vcf = lift_input(wildcards)
  else:
    vcf = 'temp/{liftover_outdir}/{cohort}.from-{frombuild}_to-{tobuild}.chr{chrom}.vcf.gz'
  string_ = {'vcf': vcf, 'tbi': vcf + '.tbi'}
  return {k: expand(v, frombuild=fbuild, **wildcards) for k, v in string_.items()}


rule matched_chrom:
  input: unpack(matched_in)
  params:
    chrom = chromname
  output:
    vcf = '{liftover_outdir}/{cohort}.{tobuild}.chr{chrom}_only.vcf.gz',
    tbi = '{liftover_outdir}/{cohort}.{tobuild}.chr{chrom}_only.vcf.gz.tbi'
  conda: 'envs/hgdpenv.yaml'
  threads: 1
  resources:
    mem_mb = 4000,
    time_min = 240
  shell: '''
bcftools view -t {params.chrom} -Oz -o {output.vcf} {input.vcf}
bcftools index -t {output.vcf}
'''

rule mismatched_chrom:
  input:
    vcf = rules.liftover.output.vcf,
    tbi = rules.liftover.output.tbi
  params:
    chrom = chromname
  output:
    vcf = temp('temp/{liftover_outdir}/{cohort}.from-{frombuild}_to-{tobuild}.chr{chrom}_different.vcf.gz'),
    tbi = temp('temp/{liftover_outdir}/{cohort}.from-{frombuild}_to-{tobuild}.chr{chrom}_different.vcf.gz.tbi'),
  conda: 'envs/hgdpenv.yaml'
  threads: 1
  resources:
    mem_mb = 4000,
    time_min = 240
  shell: '''
bcftools view -t ^{params.chrom} -Oz -o {output.vcf} {input.vcf}
bcftools index -t {output.vcf}
'''


def mismatched_in_vcf(wildcards):
  fbuild = inputs.loc[wildcards.cohort, 'build']
  if GATK_BUILDS_ONLY:
    fbuild = 'b' + str(calculate_build(fbuild))
  string_ = 'temp/{{liftover_outdir}}/{{cohort}}.from-{frombuild}_to-{{tobuild}}.chr{chrom}_different.vcf.gz'
  chrs = inputs.loc[wildcards.cohort, 'contigs']
  return expand(string_, frombuild=fbuild, chrom=chrs)


def mismatched_in_tbi(wildcards):
  fbuild = inputs.loc[wildcards.cohort, 'build']
  if GATK_BUILDS_ONLY:
    fbuild = 'b' + str(calculate_build(fbuild))
  string_ = 'temp/{{liftover_outdir}}/{{cohort}}.from-{frombuild}_to-{{tobuild}}.chr{chrom}_different.vcf.gz.tbi'
  chrs = inputs.loc[wildcards.cohort, 'contigs']
  return expand(string_, frombuild=fbuild, chrom=chrs)

rule mismatched_chrom_combine:
  input:
    vcf = mismatched_in_vcf,
    tbi = mismatched_in_tbi
  output:
    vcf = '{liftover_outdir}/{cohort}.{tobuild}.mismatched_chroms.vcf.gz',
    tbi = '{liftover_outdir}/{cohort}.{tobuild}.mismatched_chroms.vcf.gz.tbi'
  conda: 'envs/hgdpenv.yaml'
  threads: 1
  resources:
    mem_mb = 5200,
    time_min = 240
  shell: '''
bcftools concat -a -Oz -o {output.vcf} {input.vcf}
bcftools index -t {output.vcf}
'''


def same_in(wildcards):
  vcf = '{{liftover_outdir}}/{{cohort}}.{{tobuild}}.chr{chrom}_only.vcf.gz'
  chrs = filter_mainchrs(inputs.loc[wildcards.cohort, 'contigs'])
  string_ = {'vcf': vcf, 'tbi': vcf + '.tbi'}
  return {k: expand(v, chrom=chrs) for k, v in string_.items()}

rule matched_chrom_combine:
  input: unpack(same_in)
  output:
    vcf = '{liftover_outdir}/{cohort}.{tobuild}.same_chr.vcf.gz',
    tbi = '{liftover_outdir}/{cohort}.{tobuild}.same_chr.vcf.gz.tbi'
  conda: 'envs/hgdpenv.yaml'
  threads: 1
  resources:
    mem_mb = 5200,
    time_min = 240
  shell: '''
bcftools concat -a -Oz -o {output.vcf} {input.vcf}
bcftools index -t {output.vcf}
'''
